https://aminallam.github.io/architecture.html#edu
Programming language 1.implementors (writers of compilers or interpreters).
                     2.users (programmers).
is divided into:
                     1.syntax: the FORM of its expressions.
                     2.semantics: the MEANING of its expressions.

we'll focus on how we describe the syntax
program->statment->lexemes->token(category of the lexemes)
A program consists of a sequence of statements.
A statement consists of a sequence of small units
called lexemes.
A token of a language is a category of its lexemes.
= * + ; etc -> each on is in a different category (token) since they have different meaning 
"lexem = token cus it is a category that has one element"

to describe the syntax of a programming language we use grammar we'll BNF mechanism
Backus-Naur"the inventors name" Form (BNF) grammar "Context free gammars(CFGs) for natural languages and then applied to the programming languages"

the lecture has an example of a small program consists of 5 rule "not fixed"
terminal it shows in the program 
non-terminal it does not shows in the program <> I'll describe it in the program

LHS -> RHS
in BNF there is someting called metasymbol |'vertical bar or slash' and that mean or  ->

I can expand the statement_list into two thing one statement or statement ; statment_list
and that is called recursive definition (it exist in both LHS and RHS) 

the ; and the = is terminal that means that it exists in the program

<var> -> A | B | C in this small program the programmer can't use any other variable name just A B C

BNF is like a genarative device that can generate any program(Derivations) 


how to make Derivation to that program begin A=B+C; B=C end from BNF

what we did is the left most derivation but can do it right most derivation

any program I can do drivation to it or it is not related to the BNF grammar
